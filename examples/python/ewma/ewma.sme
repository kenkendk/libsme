// foo

sync proc calc (in data, const decay)
    // bus my {
    //     prev: i32 = 0;
    // };
    bus result {
        val: int;
        valid: bool;
    };
    var prev: i11;
    //var prev: i32;
    const sub: int = 1;

    //  func calc(next: i32, prev: i32) : i32
    //       var part1: i32;
    //       var part2: i32;
    //       var part3: i32;
    //  {
    //       part1 = next >> decay;
    //       part2 = prev >> decay;
    //       part3 = (1 << d) - 1;
    //       return part1 + part2 * part3;
    // };
{
    if (data.valid) {
        result.valid = true;
        prev = (data.val >> decay) + (prev >> decay) * ((1 << decay) - 1);
        //my.prev = calc(data.val, my.prev);
        result.val = prev;
    } elif (!data.valid) {
        result.val = prev;
    } else {
        result.valid = false;
    }
}

sync proc merge (in long, in short, out res) {
    if (long.valid && short.valid) {
        res.valid = true;
        res.long = long.val;
        res.short = short.val;
    } else {
        res.valid = false;
    }
}

network ewma () {
    //const decays: [2]i2 = [2, 3];

    const decay1: int = 2;
    const decay2: int = 3;

    exposed bus stream {
        val: int;
        valid: bool;
    };

    exposed bus output {
        short: int;
        long: int;
        valid: bool;
    };

    instance short of calc (data: stream, decay: decay1);
    instance long of calc (data: stream, decay: decay2);
    //instance short of calc (data: stream, decay: decays[0]);
    //instance long of calc (data: stream, decay: decays[1]);
    instance _ of merge (long: long.result, short: short.result, res: output);

    // Alternative to merge process:
    // exposed bus output {
    //   short: i32 <= short.val;
    //   long:  i32 <= long.val;
    //   valid: bool <= sort.valid & long.valid;
    // }
}
